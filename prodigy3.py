# -*- coding: utf-8 -*-
"""prodigy3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yGFwWzjLMuTOMdha4UmWcL7vcnhJIGm-
"""

import pandas as pd

df=pd.read_csv('/content/bank-full.csv')

df.head()

df.shape

df.info()

df.describe(include='all')

df.head(5)

df=df.drop(['contact','poutcome'],axis=1)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['job'] = le.fit_transform(df['job'])
df['marital']=le.fit_transform(df['marital'])
df['education']=le.fit_transform(df['education'])
df['housing']=le.fit_transform(df['housing'])
df['loan']=le.fit_transform(df['loan'])
df['month']=le.fit_transform(df['month'])
df['default']=le.fit_transform(df['default'])
df.head()

from sklearn import tree
from sklearn.model_selection import train_test_split

X = df.drop('y', axis=1)
y = df['y']

X

y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

model = tree.DecisionTreeClassifier()
model.fit(X_train,y_train)

print(f"Accuracy on test set: {model.score(X_test, y_test)}")

print(model.feature_names_in_)

new_data = pd.DataFrame({
    'age':[34,50,80,60,20],
    'job': ['management', 'blue-collar', 'technician', 'admin.', 'services'],
    'marital': ['married', 'single', 'married', 'single', 'married'],
    'education': ['university.degree', 'high.school', 'professional.course', 'university.degree', 'high.school'],
    'default': ['no', 'yes', 'no', 'no', 'yes'],
    'balance':[5626,32632,3265,4859,4157],
    'housing': ['no', 'yes', 'no', 'no', 'yes'],
    'loan': ['no', 'yes', 'no', 'yes', 'no'],
    'day':['mon','tue','tue','mon','fri'],
    'month': ['may', 'apr', 'jun', 'feb', 'aug'],
    'duration':[84,264,336,62,45],
    'campaign':[1,1,1,1,1],
    'pdays':[-1,-1,-1,-1,-1],
    'previous':[0,0,0,0,0]
})

new_data['job'] = le.fit_transform(new_data['job'])
new_data['marital'] = le.fit_transform(new_data['marital'])
new_data['education'] = le.fit_transform(new_data['education'])
new_data['housing'] = le.fit_transform(new_data['housing'])
new_data['loan'] = le.fit_transform(new_data['loan'])
new_data['month'] = le.fit_transform(new_data['month'])
new_data['default'] = le.fit_transform(new_data['default'])
new_data['age'] = le.fit_transform(new_data['age'])
new_data['day'] = le.fit_transform(new_data['day'])
new_data['campaign'] = le.fit_transform(new_data['campaign'])
new_data['pdays'] = le.fit_transform(new_data['pdays'])
new_data['duration'] = le.fit_transform(new_data['duration'])
new_data['balance'] = le.fit_transform(new_data['balance'])
predictions = model.predict(new_data)

print(predictions)